# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S-LTwNvHLLtc6YxMRMGDmXHsVgzyGe86
"""

!pip install langchain langchain_groq gradio pdfplumber langchain_community langgraph

import gradio as gr
from langchain_groq import ChatGroq
from langgraph.graph import StateGraph, START,END
from typing import List, TypedDict, Annotated
from langchain_core.messages import HumanMessage,AIMessage
from langchain_core.prompts import ChatPromptTemplate
import pdfplumber

from langchain_groq import ChatGroq
llm=ChatGroq(
    temperature=0,
    groq_api_key="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",
    model_name="llama-3.3-70b-versatile"
)

class Resume(TypedDict):
  messages: Annotated[List[AIMessage|HumanMessage], "The following messages:"]
  resume_text:str
  job_description: str
  ATS_score: int
  feedback: str

def extract_resume_text(state: Resume, resume_file)-> Resume:
  print("Extracting text from resume:")
  with pdfplumber.open(resume_file) as pdf:
    text='\n'.join([page.extract_text() or "" for page in pdf.pages])
  return{
      **state,
      "resume_text": text,
      "messages": state['messages']+[HumanMessage(content=text)]
  }
def ats_score(state: Resume) -> Resume:
  print("Analyzing ATS score:")
  ats_prompt=ChatPromptTemplate.from_messages([
      "System","Analyze the resume's ATS compatibility and give scores based on its formatting, readability, keyword optimazation",
      "Human","{resume_text}"
    ])
  response=llm.invoke(ats_prompt.format_messages(resume_text=state['resume_text']))
  return{
      **state,
      "ats_score":(response.content.count("%")),
      "messages": state['messages']+[AIMessage(content=response.content)],
      "feedback":response.content
  }
def comparing_jobs(state:Resume, job_description)-> Resume:
  print("Comapring resume with job description:")
  comparison_prompt=ChatPromptTemplate.from_messages([
      "system","Comapre the resume with the job description and put a match percentage",
      "human","Resume:\n {resume_text}\n\n Job Description:\n {job_description}"
  ])
  response=llm.invoke(comparison_prompt.format_messages(resume_text=state['resume_text'], job_description=job_description))
  return{
      **state,
      "messages": state['messages']+[AIMessage(content=response.content)],
      "feedback":state['feedback']+"\n\n JOB MATCH ANALYSIS:"+ response.content
  }

graph=StateGraph(Resume)

graph.add_node("extract_resume_text", extract_resume_text)
graph.add_node("ats_score", ats_score)
graph.add_node("comparing_jobs",comparing_jobs)

graph.add_edge(START, "extract_resume_text")
graph.add_edge("extract_resume_text", "ats_score")
graph.add_edge("ats_score", "comparing_jobs")
graph.add_edge("comparing_jobs", END)

result=graph.compile()
result

def ats_resume_checker(resume_path: str, job_description: str):
    state = {"messages": [], "resume_text": "", "job_description": "", "ats_score": 0.0, "feedback": ""}
    state = extract_resume_text(state, resume_path)
    state = ats_score(state)
    state = comparing_jobs(state, job_description)

    print(f"\n**ATS Score:** {state['ats_score']} / 10")
    print("\n**Feedback:**")
    print(state['feedback'])

# --- Command-Line Interface ---
if __name__ == "__main__":
    resume_path = input("Enter the path to your resume PDF: ")
    job_description = input("Paste the job description: ")
    ats_resume_checker(resume_path, job_description)

def ats_resume_checker(resume_file, job_description):
    state = {"messages": [], "resume_text": "", "job_description": "", "ats_score": 0.0, "feedback": ""}
    state = extract_resume_text(state, resume_file)
    state = ats_score(state)
    state = comparing_jobs(state, job_description)
    return f"**ATS Score:** {state['ats_score']} / 10\n\n**Feedback:**\n{state['feedback']}"

# --- Gradio Interface ---
interface = gr.Interface(
    fn=ats_resume_checker,
    inputs=[gr.File(label="Upload Resume (PDF)"), gr.Textbox(label="Paste Job Description")],
    outputs=gr.Textbox(label="ATS Compatibility Results"),
    title="ATS Resume Checker",
    description="Upload your resume and a job description to analyze your ATS score and get suggestions."
)

# --- Launch Application ---
if __name__ == "__main__":
    interface.launch()
