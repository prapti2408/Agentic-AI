# -*- coding: utf-8 -*-
"""TravelAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jTEp-3FwJEWiV1MX7ttNkFl_XEm4FFJf
"""

!pip install langgraph langsmith

!pip install langchain langchain_groq langchain_community

!pip install gradio

import gradio as gr
from langgraph.graph import StateGraph,END
from typing import TypedDict, Annotated, List
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq

class PlannerState(TypedDict):

    messages: Annotated[List[AIMessage | HumanMessage], "The following messages"]
    city:str

    interests: List[str]
    days: int
    itinerary: str

from langchain_groq import ChatGroq
llm=ChatGroq(
    temperature=0,
    groq_api_key="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",
    model_name="llama-3.3-70b-versatile"
)
result=llm.invoke("who is the president of india")
result

itinerary_prompt= ChatPromptTemplate.from_messages([
    "system","You are a helpful travel agent.Create an itineray based on the {city} and user's interests: {interests} and the number of travel days: {days}, in buletted form",
    "human","Create and itinerary from my day trip"
])

def input_city(state : PlannerState) -> PlannerState:
  print("Please eneter the city or country you want to go:")
  user_input=input("Your input:")
  return {
      **state,
      "city":user_input,
      "messages": state['messages']+[HumanMessage(content=user_input)]
  }
def input_interests(state: PlannerState) -> PlannerState:
  print("Please eneter your interests:")
  user_input=input("Your input:")
  return{
      **state,
      "interests": [interest.strip() for interest in user_input.split(",")],
      "messages": state['messages']+ [HumanMessage(content=user_input)]
  }
def input_days(state: PlannerState) -> PlannerState:
    print("How many days will you be traveling?")
    user_input = input("Enter number of days: ")
    try:
      days = int(user_input)
    except ValueError:
      print("Invalid input. Defaulting to 1 day.")
      days = 1




    return {
        **state,
        "days": days,
        "messages": state['messages'] + [HumanMessage(content=f"Travel duration: {days} days")]
    }

def create_itinerary(state: PlannerState) -> PlannerState:
  print("Creating an itinerary:")
  response = llm.invoke(itinerary_prompt.format_messages(
        city=state['city'],
        interests=", ".join(state['interests']),
        days=state['days']
    ))
  print(response.content)
  return{
      **state,
      "itinerary":response.content,
      "messages": state['messages']+ [AIMessage(content=response.content)]
  }

from langgraph.graph import StateGraph, START, END
graph= StateGraph(PlannerState)
graph.add_node("input_city",input_city)
graph.add_node("input_interests",input_interests)
graph.add_node("input_days", input_days)
graph.add_node("create_itinerary",create_itinerary)

graph.add_edge(START, "input_city")
graph.add_edge("input_city", "input_interests")
graph.add_edge("input_interests", "input_days")
graph.add_edge("input_days", "create_itinerary")
graph.add_edge("create_itinerary", END)

result=graph.compile()
result

def travel_planner(user_response: str):
  print(f"Your request: {user_response}")
  state={
      "messages":[HumanMessage(content=user_response)],
      "city":"",
      "interests":[],
      "days": 1,
      "itinerary":""

  }
  for output in result.stream(state):
    pass

user_response= "i want to plan a day trip"
travel_planner(user_response)

def travel_planner(city: str, interests: str, days:int)->str:
    # Initialize state
    state = {
        "messages": [],
        "city": "",
        "interests": [],
        "days": 1,
        "itinerary": "",
    }

    # Process the city and interests inputs
    state = input_city(city, state)
    state = input_interests(interests, state)
    state = input_days(days, state)

    # Generate the itinerary
    itinerary = create_itinerary(state)

    return itinerary

# Build the Gradio interface
interface = gr.Interface(
    fn=travel_planner,
    theme='Yntec/HaleyCH_Theme_Orange_Green',
    inputs=[
        gr.Textbox(label="Enter the city for your day trip"),
        gr.Textbox(label="Enter your interests (comma-separated)"),
        gr.Slider(minimum=1, maximum=10, step=1, label="Number of Travel Days")
    ],
    outputs=gr.Textbox(label="Generated Itinerary"),
    title="Travel Itinerary Planner",
    description="Enter a city and your interests to generate a personalized day trip itinerary."
)

# Launch the Gradio application
interface.launch()

